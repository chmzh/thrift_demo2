/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.c.inflow.domain;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-27")
public class RoleLvUpInfo implements org.apache.thrift.TBase<RoleLvUpInfo, RoleLvUpInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RoleLvUpInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RoleLvUpInfo");

  private static final org.apache.thrift.protocol.TField ROLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roleId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OLDLEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("oldlevel", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField NEWLEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("newlevel", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField SUCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("sucess", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RoleLvUpInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RoleLvUpInfoTupleSchemeFactory());
  }

  public String roleId; // required
  public short oldlevel; // required
  public short newlevel; // required
  public short sucess; // required
  public String params; // required
  public long createTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROLE_ID((short)1, "roleId"),
    OLDLEVEL((short)2, "oldlevel"),
    NEWLEVEL((short)3, "newlevel"),
    SUCESS((short)4, "sucess"),
    PARAMS((short)5, "params"),
    CREATE_TIME((short)6, "createTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROLE_ID
          return ROLE_ID;
        case 2: // OLDLEVEL
          return OLDLEVEL;
        case 3: // NEWLEVEL
          return NEWLEVEL;
        case 4: // SUCESS
          return SUCESS;
        case 5: // PARAMS
          return PARAMS;
        case 6: // CREATE_TIME
          return CREATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OLDLEVEL_ISSET_ID = 0;
  private static final int __NEWLEVEL_ISSET_ID = 1;
  private static final int __SUCESS_ISSET_ID = 2;
  private static final int __CREATETIME_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROLE_ID, new org.apache.thrift.meta_data.FieldMetaData("roleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OLDLEVEL, new org.apache.thrift.meta_data.FieldMetaData("oldlevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "int16")));
    tmpMap.put(_Fields.NEWLEVEL, new org.apache.thrift.meta_data.FieldMetaData("newlevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "int16")));
    tmpMap.put(_Fields.SUCESS, new org.apache.thrift.meta_data.FieldMetaData("sucess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16        , "int16")));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "int64")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RoleLvUpInfo.class, metaDataMap);
  }

  public RoleLvUpInfo() {
  }

  public RoleLvUpInfo(
    String roleId,
    short oldlevel,
    short newlevel,
    short sucess,
    String params,
    long createTime)
  {
    this();
    this.roleId = roleId;
    this.oldlevel = oldlevel;
    setOldlevelIsSet(true);
    this.newlevel = newlevel;
    setNewlevelIsSet(true);
    this.sucess = sucess;
    setSucessIsSet(true);
    this.params = params;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RoleLvUpInfo(RoleLvUpInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRoleId()) {
      this.roleId = other.roleId;
    }
    this.oldlevel = other.oldlevel;
    this.newlevel = other.newlevel;
    this.sucess = other.sucess;
    if (other.isSetParams()) {
      this.params = other.params;
    }
    this.createTime = other.createTime;
  }

  public RoleLvUpInfo deepCopy() {
    return new RoleLvUpInfo(this);
  }

  @Override
  public void clear() {
    this.roleId = null;
    setOldlevelIsSet(false);
    this.oldlevel = 0;
    setNewlevelIsSet(false);
    this.newlevel = 0;
    setSucessIsSet(false);
    this.sucess = 0;
    this.params = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
  }

  public String getRoleId() {
    return this.roleId;
  }

  public RoleLvUpInfo setRoleId(String roleId) {
    this.roleId = roleId;
    return this;
  }

  public void unsetRoleId() {
    this.roleId = null;
  }

  /** Returns true if field roleId is set (has been assigned a value) and false otherwise */
  public boolean isSetRoleId() {
    return this.roleId != null;
  }

  public void setRoleIdIsSet(boolean value) {
    if (!value) {
      this.roleId = null;
    }
  }

  public short getOldlevel() {
    return this.oldlevel;
  }

  public RoleLvUpInfo setOldlevel(short oldlevel) {
    this.oldlevel = oldlevel;
    setOldlevelIsSet(true);
    return this;
  }

  public void unsetOldlevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDLEVEL_ISSET_ID);
  }

  /** Returns true if field oldlevel is set (has been assigned a value) and false otherwise */
  public boolean isSetOldlevel() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDLEVEL_ISSET_ID);
  }

  public void setOldlevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDLEVEL_ISSET_ID, value);
  }

  public short getNewlevel() {
    return this.newlevel;
  }

  public RoleLvUpInfo setNewlevel(short newlevel) {
    this.newlevel = newlevel;
    setNewlevelIsSet(true);
    return this;
  }

  public void unsetNewlevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWLEVEL_ISSET_ID);
  }

  /** Returns true if field newlevel is set (has been assigned a value) and false otherwise */
  public boolean isSetNewlevel() {
    return EncodingUtils.testBit(__isset_bitfield, __NEWLEVEL_ISSET_ID);
  }

  public void setNewlevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWLEVEL_ISSET_ID, value);
  }

  public short getSucess() {
    return this.sucess;
  }

  public RoleLvUpInfo setSucess(short sucess) {
    this.sucess = sucess;
    setSucessIsSet(true);
    return this;
  }

  public void unsetSucess() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCESS_ISSET_ID);
  }

  /** Returns true if field sucess is set (has been assigned a value) and false otherwise */
  public boolean isSetSucess() {
    return EncodingUtils.testBit(__isset_bitfield, __SUCESS_ISSET_ID);
  }

  public void setSucessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCESS_ISSET_ID, value);
  }

  public String getParams() {
    return this.params;
  }

  public RoleLvUpInfo setParams(String params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public RoleLvUpInfo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROLE_ID:
      if (value == null) {
        unsetRoleId();
      } else {
        setRoleId((String)value);
      }
      break;

    case OLDLEVEL:
      if (value == null) {
        unsetOldlevel();
      } else {
        setOldlevel((Short)value);
      }
      break;

    case NEWLEVEL:
      if (value == null) {
        unsetNewlevel();
      } else {
        setNewlevel((Short)value);
      }
      break;

    case SUCESS:
      if (value == null) {
        unsetSucess();
      } else {
        setSucess((Short)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROLE_ID:
      return getRoleId();

    case OLDLEVEL:
      return getOldlevel();

    case NEWLEVEL:
      return getNewlevel();

    case SUCESS:
      return getSucess();

    case PARAMS:
      return getParams();

    case CREATE_TIME:
      return getCreateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROLE_ID:
      return isSetRoleId();
    case OLDLEVEL:
      return isSetOldlevel();
    case NEWLEVEL:
      return isSetNewlevel();
    case SUCESS:
      return isSetSucess();
    case PARAMS:
      return isSetParams();
    case CREATE_TIME:
      return isSetCreateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RoleLvUpInfo)
      return this.equals((RoleLvUpInfo)that);
    return false;
  }

  public boolean equals(RoleLvUpInfo that) {
    if (that == null)
      return false;

    boolean this_present_roleId = true && this.isSetRoleId();
    boolean that_present_roleId = true && that.isSetRoleId();
    if (this_present_roleId || that_present_roleId) {
      if (!(this_present_roleId && that_present_roleId))
        return false;
      if (!this.roleId.equals(that.roleId))
        return false;
    }

    boolean this_present_oldlevel = true;
    boolean that_present_oldlevel = true;
    if (this_present_oldlevel || that_present_oldlevel) {
      if (!(this_present_oldlevel && that_present_oldlevel))
        return false;
      if (this.oldlevel != that.oldlevel)
        return false;
    }

    boolean this_present_newlevel = true;
    boolean that_present_newlevel = true;
    if (this_present_newlevel || that_present_newlevel) {
      if (!(this_present_newlevel && that_present_newlevel))
        return false;
      if (this.newlevel != that.newlevel)
        return false;
    }

    boolean this_present_sucess = true;
    boolean that_present_sucess = true;
    if (this_present_sucess || that_present_sucess) {
      if (!(this_present_sucess && that_present_sucess))
        return false;
      if (this.sucess != that.sucess)
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_roleId = true && (isSetRoleId());
    list.add(present_roleId);
    if (present_roleId)
      list.add(roleId);

    boolean present_oldlevel = true;
    list.add(present_oldlevel);
    if (present_oldlevel)
      list.add(oldlevel);

    boolean present_newlevel = true;
    list.add(present_newlevel);
    if (present_newlevel)
      list.add(newlevel);

    boolean present_sucess = true;
    list.add(present_sucess);
    if (present_sucess)
      list.add(sucess);

    boolean present_params = true && (isSetParams());
    list.add(present_params);
    if (present_params)
      list.add(params);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(RoleLvUpInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRoleId()).compareTo(other.isSetRoleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleId, other.roleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldlevel()).compareTo(other.isSetOldlevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldlevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldlevel, other.oldlevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewlevel()).compareTo(other.isSetNewlevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewlevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newlevel, other.newlevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSucess()).compareTo(other.isSetSucess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSucess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sucess, other.sucess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RoleLvUpInfo(");
    boolean first = true;

    sb.append("roleId:");
    if (this.roleId == null) {
      sb.append("null");
    } else {
      sb.append(this.roleId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldlevel:");
    sb.append(this.oldlevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("newlevel:");
    sb.append(this.newlevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sucess:");
    sb.append(this.sucess);
    first = false;
    if (!first) sb.append(", ");
    sb.append("params:");
    if (this.params == null) {
      sb.append("null");
    } else {
      sb.append(this.params);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RoleLvUpInfoStandardSchemeFactory implements SchemeFactory {
    public RoleLvUpInfoStandardScheme getScheme() {
      return new RoleLvUpInfoStandardScheme();
    }
  }

  private static class RoleLvUpInfoStandardScheme extends StandardScheme<RoleLvUpInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RoleLvUpInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.roleId = iprot.readString();
              struct.setRoleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OLDLEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.oldlevel = iprot.readI16();
              struct.setOldlevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NEWLEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.newlevel = iprot.readI16();
              struct.setNewlevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.sucess = iprot.readI16();
              struct.setSucessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.params = iprot.readString();
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RoleLvUpInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.roleId != null) {
        oprot.writeFieldBegin(ROLE_ID_FIELD_DESC);
        oprot.writeString(struct.roleId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OLDLEVEL_FIELD_DESC);
      oprot.writeI16(struct.oldlevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEWLEVEL_FIELD_DESC);
      oprot.writeI16(struct.newlevel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUCESS_FIELD_DESC);
      oprot.writeI16(struct.sucess);
      oprot.writeFieldEnd();
      if (struct.params != null) {
        oprot.writeFieldBegin(PARAMS_FIELD_DESC);
        oprot.writeString(struct.params);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RoleLvUpInfoTupleSchemeFactory implements SchemeFactory {
    public RoleLvUpInfoTupleScheme getScheme() {
      return new RoleLvUpInfoTupleScheme();
    }
  }

  private static class RoleLvUpInfoTupleScheme extends TupleScheme<RoleLvUpInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RoleLvUpInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRoleId()) {
        optionals.set(0);
      }
      if (struct.isSetOldlevel()) {
        optionals.set(1);
      }
      if (struct.isSetNewlevel()) {
        optionals.set(2);
      }
      if (struct.isSetSucess()) {
        optionals.set(3);
      }
      if (struct.isSetParams()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetRoleId()) {
        oprot.writeString(struct.roleId);
      }
      if (struct.isSetOldlevel()) {
        oprot.writeI16(struct.oldlevel);
      }
      if (struct.isSetNewlevel()) {
        oprot.writeI16(struct.newlevel);
      }
      if (struct.isSetSucess()) {
        oprot.writeI16(struct.sucess);
      }
      if (struct.isSetParams()) {
        oprot.writeString(struct.params);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RoleLvUpInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.roleId = iprot.readString();
        struct.setRoleIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.oldlevel = iprot.readI16();
        struct.setOldlevelIsSet(true);
      }
      if (incoming.get(2)) {
        struct.newlevel = iprot.readI16();
        struct.setNewlevelIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sucess = iprot.readI16();
        struct.setSucessIsSet(true);
      }
      if (incoming.get(4)) {
        struct.params = iprot.readString();
        struct.setParamsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
    }
  }

}

