/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.c.proto;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DvData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DvData\",\"namespace\":\"com.cndw.proto\",\"fields\":[{\"name\":\"dbName\",\"type\":\"string\"},{\"name\":\"tbName\",\"type\":\"string\"},{\"name\":\"tbParCol\",\"type\":\"string\"},{\"name\":\"tbParColVal\",\"type\":\"string\"},{\"name\":\"tbData\",\"type\":\"bytes\"},{\"name\":\"progress\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence dbName;
  @Deprecated public java.lang.CharSequence tbName;
  @Deprecated public java.lang.CharSequence tbParCol;
  @Deprecated public java.lang.CharSequence tbParColVal;
  @Deprecated public java.nio.ByteBuffer tbData;
  @Deprecated public int progress;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public DvData() {}

  /**
   * All-args constructor.
   */
  public DvData(java.lang.CharSequence dbName, java.lang.CharSequence tbName, java.lang.CharSequence tbParCol, java.lang.CharSequence tbParColVal, java.nio.ByteBuffer tbData, java.lang.Integer progress) {
    this.dbName = dbName;
    this.tbName = tbName;
    this.tbParCol = tbParCol;
    this.tbParColVal = tbParColVal;
    this.tbData = tbData;
    this.progress = progress;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return dbName;
    case 1: return tbName;
    case 2: return tbParCol;
    case 3: return tbParColVal;
    case 4: return tbData;
    case 5: return progress;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: dbName = (java.lang.CharSequence)value$; break;
    case 1: tbName = (java.lang.CharSequence)value$; break;
    case 2: tbParCol = (java.lang.CharSequence)value$; break;
    case 3: tbParColVal = (java.lang.CharSequence)value$; break;
    case 4: tbData = (java.nio.ByteBuffer)value$; break;
    case 5: progress = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'dbName' field.
   */
  public java.lang.CharSequence getDbName() {
    return dbName;
  }

  /**
   * Sets the value of the 'dbName' field.
   * @param value the value to set.
   */
  public void setDbName(java.lang.CharSequence value) {
    this.dbName = value;
  }

  /**
   * Gets the value of the 'tbName' field.
   */
  public java.lang.CharSequence getTbName() {
    return tbName;
  }

  /**
   * Sets the value of the 'tbName' field.
   * @param value the value to set.
   */
  public void setTbName(java.lang.CharSequence value) {
    this.tbName = value;
  }

  /**
   * Gets the value of the 'tbParCol' field.
   */
  public java.lang.CharSequence getTbParCol() {
    return tbParCol;
  }

  /**
   * Sets the value of the 'tbParCol' field.
   * @param value the value to set.
   */
  public void setTbParCol(java.lang.CharSequence value) {
    this.tbParCol = value;
  }

  /**
   * Gets the value of the 'tbParColVal' field.
   */
  public java.lang.CharSequence getTbParColVal() {
    return tbParColVal;
  }

  /**
   * Sets the value of the 'tbParColVal' field.
   * @param value the value to set.
   */
  public void setTbParColVal(java.lang.CharSequence value) {
    this.tbParColVal = value;
  }

  /**
   * Gets the value of the 'tbData' field.
   */
  public java.nio.ByteBuffer getTbData() {
    return tbData;
  }

  /**
   * Sets the value of the 'tbData' field.
   * @param value the value to set.
   */
  public void setTbData(java.nio.ByteBuffer value) {
    this.tbData = value;
  }

  /**
   * Gets the value of the 'progress' field.
   */
  public java.lang.Integer getProgress() {
    return progress;
  }

  /**
   * Sets the value of the 'progress' field.
   * @param value the value to set.
   */
  public void setProgress(java.lang.Integer value) {
    this.progress = value;
  }

  /** Creates a new DvData RecordBuilder */
  public static com.c.proto.DvData.Builder newBuilder() {
    return new com.c.proto.DvData.Builder();
  }
  
  /** Creates a new DvData RecordBuilder by copying an existing Builder */
  public static com.c.proto.DvData.Builder newBuilder(com.c.proto.DvData.Builder other) {
    return new com.c.proto.DvData.Builder(other);
  }
  
  /** Creates a new DvData RecordBuilder by copying an existing DvData instance */
  public static com.c.proto.DvData.Builder newBuilder(com.c.proto.DvData other) {
    return new com.c.proto.DvData.Builder(other);
  }
  
  /**
   * RecordBuilder for DvData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DvData>
    implements org.apache.avro.data.RecordBuilder<DvData> {

    private java.lang.CharSequence dbName;
    private java.lang.CharSequence tbName;
    private java.lang.CharSequence tbParCol;
    private java.lang.CharSequence tbParColVal;
    private java.nio.ByteBuffer tbData;
    private int progress;

    /** Creates a new Builder */
    private Builder() {
      super(com.c.proto.DvData.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.c.proto.DvData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.dbName)) {
        this.dbName = data().deepCopy(fields()[0].schema(), other.dbName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tbName)) {
        this.tbName = data().deepCopy(fields()[1].schema(), other.tbName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tbParCol)) {
        this.tbParCol = data().deepCopy(fields()[2].schema(), other.tbParCol);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tbParColVal)) {
        this.tbParColVal = data().deepCopy(fields()[3].schema(), other.tbParColVal);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.tbData)) {
        this.tbData = data().deepCopy(fields()[4].schema(), other.tbData);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.progress)) {
        this.progress = data().deepCopy(fields()[5].schema(), other.progress);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing DvData instance */
    private Builder(com.c.proto.DvData other) {
            super(com.c.proto.DvData.SCHEMA$);
      if (isValidValue(fields()[0], other.dbName)) {
        this.dbName = data().deepCopy(fields()[0].schema(), other.dbName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tbName)) {
        this.tbName = data().deepCopy(fields()[1].schema(), other.tbName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tbParCol)) {
        this.tbParCol = data().deepCopy(fields()[2].schema(), other.tbParCol);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tbParColVal)) {
        this.tbParColVal = data().deepCopy(fields()[3].schema(), other.tbParColVal);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.tbData)) {
        this.tbData = data().deepCopy(fields()[4].schema(), other.tbData);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.progress)) {
        this.progress = data().deepCopy(fields()[5].schema(), other.progress);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'dbName' field */
    public java.lang.CharSequence getDbName() {
      return dbName;
    }
    
    /** Sets the value of the 'dbName' field */
    public com.c.proto.DvData.Builder setDbName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.dbName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'dbName' field has been set */
    public boolean hasDbName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'dbName' field */
    public com.c.proto.DvData.Builder clearDbName() {
      dbName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'tbName' field */
    public java.lang.CharSequence getTbName() {
      return tbName;
    }
    
    /** Sets the value of the 'tbName' field */
    public com.c.proto.DvData.Builder setTbName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.tbName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'tbName' field has been set */
    public boolean hasTbName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'tbName' field */
    public com.c.proto.DvData.Builder clearTbName() {
      tbName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'tbParCol' field */
    public java.lang.CharSequence getTbParCol() {
      return tbParCol;
    }
    
    /** Sets the value of the 'tbParCol' field */
    public com.c.proto.DvData.Builder setTbParCol(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.tbParCol = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'tbParCol' field has been set */
    public boolean hasTbParCol() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'tbParCol' field */
    public com.c.proto.DvData.Builder clearTbParCol() {
      tbParCol = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'tbParColVal' field */
    public java.lang.CharSequence getTbParColVal() {
      return tbParColVal;
    }
    
    /** Sets the value of the 'tbParColVal' field */
    public com.c.proto.DvData.Builder setTbParColVal(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.tbParColVal = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'tbParColVal' field has been set */
    public boolean hasTbParColVal() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'tbParColVal' field */
    public com.c.proto.DvData.Builder clearTbParColVal() {
      tbParColVal = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'tbData' field */
    public java.nio.ByteBuffer getTbData() {
      return tbData;
    }
    
    /** Sets the value of the 'tbData' field */
    public com.c.proto.DvData.Builder setTbData(java.nio.ByteBuffer value) {
      validate(fields()[4], value);
      this.tbData = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'tbData' field has been set */
    public boolean hasTbData() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'tbData' field */
    public com.c.proto.DvData.Builder clearTbData() {
      tbData = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'progress' field */
    public java.lang.Integer getProgress() {
      return progress;
    }
    
    /** Sets the value of the 'progress' field */
    public com.c.proto.DvData.Builder setProgress(int value) {
      validate(fields()[5], value);
      this.progress = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'progress' field has been set */
    public boolean hasProgress() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'progress' field */
    public com.c.proto.DvData.Builder clearProgress() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public DvData build() {
      try {
        DvData record = new DvData();
        record.dbName = fieldSetFlags()[0] ? this.dbName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.tbName = fieldSetFlags()[1] ? this.tbName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.tbParCol = fieldSetFlags()[2] ? this.tbParCol : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.tbParColVal = fieldSetFlags()[3] ? this.tbParColVal : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.tbData = fieldSetFlags()[4] ? this.tbData : (java.nio.ByteBuffer) defaultValue(fields()[4]);
        record.progress = fieldSetFlags()[5] ? this.progress : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
