/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.c.proto;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DvSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DvSchema\",\"namespace\":\"com.cndw.proto\",\"fields\":[{\"name\":\"dbName\",\"type\":\"string\"},{\"name\":\"tbName\",\"type\":\"string\"},{\"name\":\"tbSchema\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence dbName;
  @Deprecated public java.lang.CharSequence tbName;
  @Deprecated public java.lang.CharSequence tbSchema;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public DvSchema() {}

  /**
   * All-args constructor.
   */
  public DvSchema(java.lang.CharSequence dbName, java.lang.CharSequence tbName, java.lang.CharSequence tbSchema) {
    this.dbName = dbName;
    this.tbName = tbName;
    this.tbSchema = tbSchema;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return dbName;
    case 1: return tbName;
    case 2: return tbSchema;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: dbName = (java.lang.CharSequence)value$; break;
    case 1: tbName = (java.lang.CharSequence)value$; break;
    case 2: tbSchema = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'dbName' field.
   */
  public java.lang.CharSequence getDbName() {
    return dbName;
  }

  /**
   * Sets the value of the 'dbName' field.
   * @param value the value to set.
   */
  public void setDbName(java.lang.CharSequence value) {
    this.dbName = value;
  }

  /**
   * Gets the value of the 'tbName' field.
   */
  public java.lang.CharSequence getTbName() {
    return tbName;
  }

  /**
   * Sets the value of the 'tbName' field.
   * @param value the value to set.
   */
  public void setTbName(java.lang.CharSequence value) {
    this.tbName = value;
  }

  /**
   * Gets the value of the 'tbSchema' field.
   */
  public java.lang.CharSequence getTbSchema() {
    return tbSchema;
  }

  /**
   * Sets the value of the 'tbSchema' field.
   * @param value the value to set.
   */
  public void setTbSchema(java.lang.CharSequence value) {
    this.tbSchema = value;
  }

  /** Creates a new DvSchema RecordBuilder */
  public static com.c.proto.DvSchema.Builder newBuilder() {
    return new com.c.proto.DvSchema.Builder();
  }
  
  /** Creates a new DvSchema RecordBuilder by copying an existing Builder */
  public static com.c.proto.DvSchema.Builder newBuilder(com.c.proto.DvSchema.Builder other) {
    return new com.c.proto.DvSchema.Builder(other);
  }
  
  /** Creates a new DvSchema RecordBuilder by copying an existing DvSchema instance */
  public static com.c.proto.DvSchema.Builder newBuilder(com.c.proto.DvSchema other) {
    return new com.c.proto.DvSchema.Builder(other);
  }
  
  /**
   * RecordBuilder for DvSchema instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DvSchema>
    implements org.apache.avro.data.RecordBuilder<DvSchema> {

    private java.lang.CharSequence dbName;
    private java.lang.CharSequence tbName;
    private java.lang.CharSequence tbSchema;

    /** Creates a new Builder */
    private Builder() {
      super(com.c.proto.DvSchema.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.c.proto.DvSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.dbName)) {
        this.dbName = data().deepCopy(fields()[0].schema(), other.dbName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tbName)) {
        this.tbName = data().deepCopy(fields()[1].schema(), other.tbName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tbSchema)) {
        this.tbSchema = data().deepCopy(fields()[2].schema(), other.tbSchema);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing DvSchema instance */
    private Builder(com.c.proto.DvSchema other) {
            super(com.c.proto.DvSchema.SCHEMA$);
      if (isValidValue(fields()[0], other.dbName)) {
        this.dbName = data().deepCopy(fields()[0].schema(), other.dbName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tbName)) {
        this.tbName = data().deepCopy(fields()[1].schema(), other.tbName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tbSchema)) {
        this.tbSchema = data().deepCopy(fields()[2].schema(), other.tbSchema);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'dbName' field */
    public java.lang.CharSequence getDbName() {
      return dbName;
    }
    
    /** Sets the value of the 'dbName' field */
    public com.c.proto.DvSchema.Builder setDbName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.dbName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'dbName' field has been set */
    public boolean hasDbName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'dbName' field */
    public com.c.proto.DvSchema.Builder clearDbName() {
      dbName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'tbName' field */
    public java.lang.CharSequence getTbName() {
      return tbName;
    }
    
    /** Sets the value of the 'tbName' field */
    public com.c.proto.DvSchema.Builder setTbName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.tbName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'tbName' field has been set */
    public boolean hasTbName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'tbName' field */
    public com.c.proto.DvSchema.Builder clearTbName() {
      tbName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'tbSchema' field */
    public java.lang.CharSequence getTbSchema() {
      return tbSchema;
    }
    
    /** Sets the value of the 'tbSchema' field */
    public com.c.proto.DvSchema.Builder setTbSchema(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.tbSchema = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'tbSchema' field has been set */
    public boolean hasTbSchema() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'tbSchema' field */
    public com.c.proto.DvSchema.Builder clearTbSchema() {
      tbSchema = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public DvSchema build() {
      try {
        DvSchema record = new DvSchema();
        record.dbName = fieldSetFlags()[0] ? this.dbName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.tbName = fieldSetFlags()[1] ? this.tbName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.tbSchema = fieldSetFlags()[2] ? this.tbSchema : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
